/*
<div id="cs" data-src="/insight" data-star="false" data-quantity="6" data-unlimited="false" data-filterable="false" data-filter="*" data-layout="carousel" data-perRow="3" data-thumbnail="true" data-thumbnailSize="75" data-title="true" data-excerpt="true" data-readMore="true" data-tags="true" data-categories="true" data-date="true" data-author="true" data-titleOrder="2" data-metaOrder="1" data-excerptOrder="3"></div>

#cs{
  &[data-layout="carousel"]{

  }
  &[data-layout="grid"]{
    display: flex;
    flex-wrap: wrap;
    .cs_item{
      margin-right: 20px;
      margin-bottom: 20px !important;
    }
    &[data-perrow="1"]{
      .cs_item{
        width: calc(~'100% / 1 - 0px');
        margin: 0px !important;
      }
    }
    &[data-perrow="2"]{
      .cs_item{
        width: calc(~'100% / 2 - 20px');
      }
    }
    &[data-perrow="3"]{
      .cs_item{
        width: calc(~'100% / 3 - 20px');
      }
    }
    &[data-perrow="4"]{
      .cs_item{
        width: calc(~'100% / 4 - 20px');
      }
    }
    &[data-perrow="5"]{
      .cs_item{
        width: calc(~'100% / 5 - 20px');
      }
    }
  }
  .cs_item{
    display: flex;
    flex-direction: column;
    border-radius: 10px;
    overflow: hidden;
    .cs_thumbnail{
      background-size: cover;
      background-position: center;
      width: 100%;
      height: 0px;
    }
    .cs_content{
      background-color: white;
      padding: 10px;
      width: 100%;
flex-grow: 1;
      .cs_meta{
        font-size: 13px;
        display: flex;
        flex-wrap: wrap;
        > div{
          margin-bottom: 4px;
          font-family: Arial !important;
          line-height: 1.2em;
          font-weight: bold !important;
        }
        > div:not(:last-of-type){
          margin-right: 6px;
        }
        .cs_cats{
          color: rgb(111,178,223);
        }
        .cs_tags{
          color: rgb(0,0,0);
        }
        .cs_date{
          color: rgb(0,0,0);
        }
        .cs_author{
          color: #002575;
        }
        .cs_break{
          flex-basis: 100%;
        }
      }
      .cs_title{
        font-size: 18px !important;
        font-weight: 700;
        color: #002575;
        margin-block-start: .83em;
        margin-block-end: .33em;
      }
      .cs_excerpt{
        font-size: 14px;
        line-height: 1.4em;
        color: #000000;
        p{
          font-family: arial !important;
        }
        .cs_readmore{
          font-size: 0px;
          text-align: right;
          &:before{
            content: 'â†’';
            font-size: 32px;
            color: rgb(111,178,223);
            display: block;
          }
        }
      }
    }
  }
}

*/

<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery.isotope/3.0.6/isotope.pkgd.min.js" integrity="sha512-Zq2BOxyhvnRFXu0+WE6ojpZLOU2jdnqbrM1hmVdGzyeCa1DgM3X5Q4A/Is9xA1IkbUeDd7755dNNI/PzSf2Pew==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>

//sum all
    var getUrlParameter = function getUrlParameter(sParam) {
      var sPageURL = window.location.search.substring(1),
          sURLVariables = sPageURL.split('&'),
          sParameterName,
          i;

      for (i = 0; i < sURLVariables.length; i++) {
        sParameterName = sURLVariables[i].split('=');

        if (sParameterName[0] === sParam) {
          return sParameterName[1] === undefined ? true : decodeURIComponent(sParameterName[1]);
        }
      }
      return false;
    };
    if($('#cs').length){
      var elm = $('#cs')
      elm.parents('.sqs-block').addClass('cs_wrapper')
      if(!getUrlParameter('cat') == "" || !getUrlParameter('tag') == ""){
        if(!getUrlParameter('cat') == ""){
          var url = elm.attr('data-src') + '/category/' + getUrlParameter('cat') + '?'
          }
        if(!getUrlParameter('tag') == ""){
          var url = elm.attr('data-src') + '/tag/' + getUrlParameter('tag') + '?'
          }
      }else{
        if(elm.attr('data-filter') == "*"){
          var url = elm.attr('data-src') + '?' 
          }else{
            if(elm.attr('data-filterby') == "author"){
              var url = elm.attr('data-src') + '?' 
              }else{
                var url = elm.attr('data-src') + '/' + elm.attr('data-filterby') + '/' + elm.attr("data-filter") + '?'
                }
          }
      }
      function ajaxCall(){
        console.log('https://' + window.location.hostname + url + '&format=json')
        $.getJSON( 'https://' + window.location.hostname + url + '&format=json', function( data ) {
          if(elm.attr('data-filterable') == "true"){
              $('<cs_filter></cs_filter>').insertBefore($('#cs'))
            $('cs_filter').append('<div class="cs_cat active" data-filter="*">All</div>')
            data.collection.categories.forEach(function(a, i){
              var temp = '.' + a.replace(/\s/g,'').replace(/[^a-z0-9\s]/gi, '')
              $('cs_filter').append('<div class="cs_cat" data-filter="'+temp+'">'+a+'</div>')
            })
          }
          console.log('----------')
          console.log(data)
          var loop = 0;

          data.items.forEach(function(a, i){
            if(loop < elm.attr('data-quantity')){
              if(elm.attr('data-unlimited') == "false"){
                if($('.entry-title').length){
                  console.log(a.title, $('.entry-title').text())
                  if(a.title == $('.entry-title').text()){
                  }else{
                    loop++
                  }
                }else{
                  loop++
                }
              }
              var cats = '';
              var catsMeta = '';
              a.categories.forEach(function(a){
                cats = cats + a.replace(/\s/g,'').replace(/[^a-z0-9\s]/gi, '') + ' ';
                catsMeta = catsMeta + '<a href="/filter?cat=' + encodeURIComponent(a) + '">' + a.replace(/[^a-z0-9\s]/gi, '') + '</a>'
              })            
              var tags = '';
              var tagsMeta = '';
              a.tags.forEach(function(a){
                tags = tags + a.replace(/\s/g,'').replace(/[^a-z0-9\s]/gi, '') + ' ';
                tagsMeta = tagsMeta + '<a href="/filter?tag=' + encodeURIComponent(a) + '">' + a.replace(/[^a-z0-9\s]/gi, '') + '</a>'
              })

              var thumbnail = ""
              if(elm.attr("data-thumbnail") == "true"){
                thumbnail = '<div class="cs_thumbnail" style="background-image: url('+a.assetUrl+'?format=2500w); padding-bottom: '+elm.attr("data-thumbnailsize")+'%;"></div>'
              }

              var title = ""
              if(elm.attr("data-title") == "true"){
                title = '<h4 class="cs_title" style="order: '+elm.attr("data-titleorder")+'"><a href="'+a.fullUrl+'">'+a.title+'</a></h4>'
              }

              if(elm.attr("data-readmore") == "true"){
                var excerpt = ""
                if(elm.attr("data-excerpt") == "true"){
                  excerpt = '<div class="cs_excerpt" style="order: '+elm.attr("data-excerptorder")+'">'+a.excerpt+'<a class="cs_readmore" href="'+a.fullUrl+'">Read more</a></div>'
                }
              }else{
                var excerpt = ""
                if(elm.attr("data-excerpt") == "true"){
                  excerpt = '<div class="cs_excerpt" style="order: '+elm.attr("data-excerptorder")+'">'+a.excerpt+'</div>'
                }
              }

              var date = ""
              if(elm.attr("data-date") == "true"){
                var rawDate = new Date(a.publishOn).toLocaleDateString("en-UK")
                date = '<div class="cs_date">'+rawDate+'</div>'
              }

              console.log(date)
              var star = ""
              if(elm.attr("data-star") == "true"){
                if(a.starred == true){
                  star = "true"
                }else{
                  star = ""
                }
              }else{
                star = ""
              }

              var author = ""
              if(elm.attr("data-author") == "true"){
                author = '<div class="cs_author"><a href="/authors/'+a.author.displayName.replaceAll(" ", "-").toLowerCase()+'">'+a.author.displayName+'</a></div>'
              }
              if($('.entry-title').length){
                if(a.title == $('.entry-title').text()){
                }else{
                  if(elm.attr('data-filterby') == "author"){
                    if(elm.attr("data-filter").toLowerCase().replaceAll(' ', '') == a.author.displayName.toLowerCase().replaceAll(' ', '')){
                      elm.append('<div class="cs_item '+cats+' '+star+'">'+thumbnail+'<div class="cs_content"><div class="cs_meta" style="order: '+elm.attr("data-metaorder")+'"><div class="cs_cats">'+catsMeta+'</div><div class="cs_tags">'+tagsMeta+'</div><div class="cs_break"></div>'+date+''+author+'</div>'+title+excerpt+'</div></div>') 
                    }
                  }else{
                    elm.append('<div class="cs_item '+cats+' '+star+'">'+thumbnail+'<div class="cs_content"><div class="cs_meta" style="order: '+elm.attr("data-metaorder")+'"><div class="cs_cats">'+catsMeta+'</div><div class="cs_tags">'+tagsMeta+'</div><div class="cs_break"></div>'+date+''+author+'</div>'+title+excerpt+'</div></div>') 
                  }
                }
              }else{
                if(elm.attr('data-filterby') == "author"){
                  if(elm.attr("data-filter").toLowerCase().replaceAll(' ', '') == a.author.displayName.toLowerCase().replaceAll(' ', '')){
                    elm.append('<div class="cs_item '+cats+' '+star+'">'+thumbnail+'<div class="cs_content"><div class="cs_meta" style="order: '+elm.attr("data-metaorder")+'"><div class="cs_cats">'+catsMeta+'</div><div class="cs_tags">'+tagsMeta+'</div><div class="cs_break"></div>'+date+''+author+'</div>'+title+excerpt+'</div></div>') 
                  }
                }else{
                  elm.append('<div class="cs_item '+cats+' '+star+'">'+thumbnail+'<div class="cs_content"><div class="cs_meta" style="order: '+elm.attr("data-metaorder")+'"><div class="cs_cats">'+catsMeta+'</div><div class="cs_tags">'+tagsMeta+'</div><div class="cs_break"></div>'+date+''+author+'</div>'+title+excerpt+'</div></div>') 
                }
              }

            }else{
              return false; 
            }

          })
          //$('#cs').append('<p>'++'</p>')
          console.log('----------')
          console.log(data.pagination)
          if(elm.attr('data-unlimited') == "true"){
            if(data.pagination.nextPage == true){
              url = data.pagination.nextPageUrl
              ajaxCall()
            }else{
              console.log(elm.attr('data-star'))
              if(elm.attr('data-star') == "true"){
                elm.find('.cs_item').each(function(){
                  if($(this).hasClass('true')){
                    $(this).addClass('true1')
                  }else{
                    $(this).remove() 
                  }
                })
              }
              if(elm.attr('data-layout') == "carousel"){
                $('#cs').slick({
                  slidesToShow: parseInt(elm.attr("data-perrow")),
                  slidesToScroll: parseInt(elm.attr("data-perrow")),
                  dots: true,
                  arrows: true,
                  infinite: false,
                  responsive: [
                    {
                      breakpoint: 980,
                      settings: {
                        arrows: true,
                        slidesToShow: 1,
                        slidesToScroll: 1
                      }
                    }
                  ]
                }); 
              }

              if(elm.attr('data-filterable') == "true"){
                var $grid = $('#cs').isotope({
                  // options
                  itemSelector: '.cs_item',
                  layoutMode: 'fitRows'
                });

                $('cs_filter').on( 'click', 'div', function() {
                  $('cs_filter .active').removeClass('active')
                  $(this).addClass('active')
                  var filterValue = $(this).attr('data-filter');
                  $grid.isotope({ filter: filterValue });
                  if($(window).width() < 850){
                    $('html, body').stop().animate({
                      scrollTop: $("#cs").offset().top - 30
                    }, 500);
                  }
                });
              }
            }
          }else{
            if(elm.attr('data-layout') == "carousel"){
              $('#cs').slick({
                slidesToShow: parseInt(elm.attr("data-perrow")),
                slidesToScroll: parseInt(elm.attr("data-perrow")),
                dots: true,
                arrows: true,
                infinite: false,
                responsive: [
                  {
                    breakpoint: 980,
                    settings: {
                      arrows: true,
                      slidesToShow: 1,
                      slidesToScroll: 1
                    }
                  }
                ]
              }); 
            }

            if(elm.attr('data-filterable') == "true"){
              var $grid = $('#cs').isotope({
                // options
                itemSelector: '.cs_item',
                layoutMode: 'fitRows'
              });

              $('cs_filter').on( 'click', 'div', function() {
                $('cs_filter .active').removeClass('active')
                $(this).addClass('active')
                var filterValue = $(this).attr('data-filter');
                $grid.isotope({ filter: filterValue });
                if($(window).width() < 850){
                  $('html, body').stop().animate({
                    scrollTop: $("#cs").offset().top - 30
                  }, 500);
                }
              });
            }
          }


        })
      }
      ajaxCall()
    }
    //end sum all